/**
 */
package ru.agentlab.jmeter.ecore.model.jmeter.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import ru.agentlab.jmeter.ecore.model.jmeter.util.JmeterAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JmeterItemProviderAdapterFactory extends JmeterAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public JmeterItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ru.agentlab.jmeter.ecore.model.jmeter.TestPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestPlanItemProvider testPlanItemProvider;

	/**
	 * This creates an adapter for a {@link ru.agentlab.jmeter.ecore.model.jmeter.TestPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestPlanAdapter() {
		if (testPlanItemProvider == null) {
			testPlanItemProvider = new TestPlanItemProvider(this);
		}

		return testPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ru.agentlab.jmeter.ecore.model.jmeter.Timer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimerItemProvider timerItemProvider;

	/**
	 * This creates an adapter for a {@link ru.agentlab.jmeter.ecore.model.jmeter.Timer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimerAdapter() {
		if (timerItemProvider == null) {
			timerItemProvider = new TimerItemProvider(this);
		}

		return timerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ru.agentlab.jmeter.ecore.model.jmeter.UniformRandomTimer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniformRandomTimerItemProvider uniformRandomTimerItemProvider;

	/**
	 * This creates an adapter for a {@link ru.agentlab.jmeter.ecore.model.jmeter.UniformRandomTimer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniformRandomTimerAdapter() {
		if (uniformRandomTimerItemProvider == null) {
			uniformRandomTimerItemProvider = new UniformRandomTimerItemProvider(this);
		}

		return uniformRandomTimerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ru.agentlab.jmeter.ecore.model.jmeter.ThreadGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThreadGroupItemProvider threadGroupItemProvider;

	/**
	 * This creates an adapter for a {@link ru.agentlab.jmeter.ecore.model.jmeter.ThreadGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThreadGroupAdapter() {
		if (threadGroupItemProvider == null) {
			threadGroupItemProvider = new ThreadGroupItemProvider(this);
		}

		return threadGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ru.agentlab.jmeter.ecore.model.jmeter.AccessLogSampler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessLogSamplerItemProvider accessLogSamplerItemProvider;

	/**
	 * This creates an adapter for a {@link ru.agentlab.jmeter.ecore.model.jmeter.AccessLogSampler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessLogSamplerAdapter() {
		if (accessLogSamplerItemProvider == null) {
			accessLogSamplerItemProvider = new AccessLogSamplerItemProvider(this);
		}

		return accessLogSamplerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ru.agentlab.jmeter.ecore.model.jmeter.ResultCollector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultCollectorItemProvider resultCollectorItemProvider;

	/**
	 * This creates an adapter for a {@link ru.agentlab.jmeter.ecore.model.jmeter.ResultCollector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultCollectorAdapter() {
		if (resultCollectorItemProvider == null) {
			resultCollectorItemProvider = new ResultCollectorItemProvider(this);
		}

		return resultCollectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ru.agentlab.jmeter.ecore.model.jmeter.TableResultCollector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableResultCollectorItemProvider tableResultCollectorItemProvider;

	/**
	 * This creates an adapter for a {@link ru.agentlab.jmeter.ecore.model.jmeter.TableResultCollector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableResultCollectorAdapter() {
		if (tableResultCollectorItemProvider == null) {
			tableResultCollectorItemProvider = new TableResultCollectorItemProvider(this);
		}

		return tableResultCollectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ru.agentlab.jmeter.ecore.model.jmeter.GraphResultCollector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphResultCollectorItemProvider graphResultCollectorItemProvider;

	/**
	 * This creates an adapter for a {@link ru.agentlab.jmeter.ecore.model.jmeter.GraphResultCollector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphResultCollectorAdapter() {
		if (graphResultCollectorItemProvider == null) {
			graphResultCollectorItemProvider = new GraphResultCollectorItemProvider(this);
		}

		return graphResultCollectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ru.agentlab.jmeter.ecore.model.jmeter.StatResultCollector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatResultCollectorItemProvider statResultCollectorItemProvider;

	/**
	 * This creates an adapter for a {@link ru.agentlab.jmeter.ecore.model.jmeter.StatResultCollector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatResultCollectorAdapter() {
		if (statResultCollectorItemProvider == null) {
			statResultCollectorItemProvider = new StatResultCollectorItemProvider(this);
		}

		return statResultCollectorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (testPlanItemProvider != null) testPlanItemProvider.dispose();
		if (timerItemProvider != null) timerItemProvider.dispose();
		if (uniformRandomTimerItemProvider != null) uniformRandomTimerItemProvider.dispose();
		if (threadGroupItemProvider != null) threadGroupItemProvider.dispose();
		if (accessLogSamplerItemProvider != null) accessLogSamplerItemProvider.dispose();
		if (resultCollectorItemProvider != null) resultCollectorItemProvider.dispose();
		if (tableResultCollectorItemProvider != null) tableResultCollectorItemProvider.dispose();
		if (graphResultCollectorItemProvider != null) graphResultCollectorItemProvider.dispose();
		if (statResultCollectorItemProvider != null) statResultCollectorItemProvider.dispose();
	}

}
